Build1=Default,b4a.example
File1=backButton (1).png
File2=backspace.png
File3=coin.png
File4=convertText.png
File5=MainFrame.bal
File6=ruler.png
File7=StartingFrame.bal
File8=weight.jpg
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
Group=Default Group
Library1=core
Library2=xui
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="31"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=Starter
NumberOfFiles=8
NumberOfLibraries=2
NumberOfModules=1
Version=12.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Unit Converter
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: Portrait
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: True
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	
	Private background As Panel
	Private userInp As Label
	Private result As Label
	Private moneyBef As Spinner
	Private moneyAf As Spinner
	Private massBef As Spinner
	Private massAf As Spinner
	Private distBef As Spinner
	Private distAf As Spinner
	Private mainFrame, startFrame As Panel 'for layout
	'for saving user click in starting frame
	Private coinClick As Boolean = False
	Private weightClick As Boolean = False
	Private lengthClick As Boolean = False
	'until here
	'saves the user click on input//checks what is input and result
	
	Private first As Boolean = True
	Private second As Boolean = False
	'until here
End Sub

Sub Activity_Create(FirstTime As Boolean)
'	Load layout, in this case load the starting layout
	init


'	makes the hint and text to their first forms
	userInp.Text = 0
	result.Text = 0
	
'	dec=lare the available convert
	declareList
	
	'makes the first input the input//making it obvious
	changeText
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Sub changeText
	If first Then
		userInp.TextColor = Colors.RGB(0,0,255)
		userInp.TextSize = 25
		result.TextColor = Colors.RGB(0,0,0)
		result.TextSize = 17
	Else If second Then
		userInp.TextColor = Colors.RGB(0,0,0)
		userInp.TextSize = 17
		result.TextColor = Colors.RGB(0,0,255)
		result.TextSize = 25
	End If
End Sub
'initialize loading layout
Sub init 'for loading the layout
	mainFrame.Initialize("") : mainFrame.Visible=False
	Activity.AddView(mainFrame,0,0,100%x,100%y) 'addview sets the width
	mainFrame.LoadLayout("MainFrame") ' load
	
	startFrame.Initialize("") : startFrame.Visible=True
	Activity.AddView(startFrame,0,0,100%x,100%y)
	startFrame.LoadLayout("StartingFrame")
End Sub

'declare necessary info function
Sub declareList
	'add the options on money spinners
	Dim money As List
	money.Initialize2(Array("PHP","US Dollar", "Yuan", "Ruble", "Euro"))
	moneyBef.AddAll(money)
	moneyAf.AddAll(money)
	
	'add the options on temperature spinners
	Dim mass As List
	mass.Initialize2(Array("kilogram", "gram", "pound"))
	massBef.AddAll(mass)
	massAf.AddAll(mass)
	
	'add the options on distance spinners
	Dim distance As List
	distance.Initialize2(Array("kilometer", "centimeter", "meter", "foot"))
	distBef.AddAll(distance)
	distAf.AddAll(distance)
End Sub

'convert money function
Sub convertMoney
	'convert money
	Dim from As String
	from = moneyBef.SelectedItem 'get selected item
	
	Dim into As String
	into = moneyAf.SelectedItem
	
	Dim dollarMoney As Map
	dollarMoney.Initialize
	'set US dollar as a standard
	'the plan is to get the currency you want to convert from, convert it to us dollar, then convert it to the currency the user wants it to
	
	dollarMoney.Put("PHP", 54.91)
	dollarMoney.Put("US Dollar", 1.00)
	dollarMoney.Put("Yuan", 6.90)
	dollarMoney.Put("Ruble", 76.26)
	dollarMoney.Put("Euro", 0.94)
	
	mainConvert(dollarMoney.Get(from), dollarMoney.Get(into))
End Sub

'convert mass function
Sub convertMass
	'convert mass
	Dim from As String
	from = massBef.SelectedItem
	
	Dim into As String
	into = massAf.SelectedItem
	
	Dim mass As Map
	mass.Initialize
	'set US dollar as a standard
	'the plan is to get the currency you want to convert from, convert it to us dollar, then convert it to the currency the user wants it to
	
	mass.Put("kilogram", 0.001)
	mass.Put("gram", 1.00)
	mass.Put("pound", 0.00220462)
	
	mainConvert(mass.Get(from), mass.Get(into))
End Sub

'convert distance/length function
Sub convertDist
	'convert distance
	Dim from As String
	from = distBef.SelectedItem
	
	Dim into As String
	into = distAf.SelectedItem
	
	Dim distance As Map
	distance.Initialize
	
	distance.Put("kilometer", 0.001)
	distance.Put("centimeter", 100.00)
	distance.Put("meter", 1.00)
	distance.Put("foot", 3.28084)
	
	mainConvert(distance.Get(from), distance.Get(into))
End Sub

Sub mainConvert(from As Double, into As Double)
	'declare the maximum number of decimal and minimum whole number
	Dim const place As Int = 15
	Dim const minInt As Int = 1
	If first = True Then
		'remove the comma
		Dim usr As Double = userInp.Text.Replace(",","")'get user input field
		
		
		'usr/from -> convert into the MAIN convert, *into convert it to the desired unit
		Dim res As Double = usr/from * (into)
		
		
		result.Text = NumberFormat(res,minInt, place)'display the result
	Else if second = True Then 'same as the statment above but from and into are interchange
		'remove the comma
		Dim usr As Double = result.Text.Replace(",","") 'get result field

		'interchange if from and into
		'because the into is for the result field, the from is for the usrfield
		Dim res As Double = usr/into * from
		userInp.Text = NumberFormat(res,minInt, place)
	End If
End Sub

'functions below just get what is selected by the user
'needed because you need to show the needed spinner in the next part of the codes
Private Sub coin_Click
	coinClick = True
	weightClick = False
	lengthClick = False
	transferMain
End Sub


Private Sub Weight_Click
	coinClick = False
	weightClick = True
	lengthClick = False
	transferMain
End Sub

Private Sub Length_Click
	coinClick = False
	weightClick = False
	lengthClick = True
	transferMain
End Sub
'until here

'transfer to the main frame
Sub transferMain
	'turn off the startframe, and turn on the main frame
	startFrame.Visible = False
	mainFrame.Visible = True
	'code below is just making the approriate spinner visible
	If coinClick = True Then
		moneyBef.Visible = True
		moneyAf.Visible = True
		
		massBef.Visible = False
		massAf.Visible = False
		
		distBef.Visible = False
		distAf.Visible = False
		
	Else If weightClick = True Then
		moneyBef.Visible = False
		moneyAf.Visible = False
		
		massBef.Visible = True
		massAf.Visible = True
		
		distBef.Visible = False
		distAf.Visible = False
		
		
	Else If lengthClick = True Then
		moneyBef.Visible = False
		moneyAf.Visible = False
		
		massBef.Visible = False
		massAf.Visible = False
		
		distBef.Visible = True
		distAf.Visible = True
		
	End If
End Sub

Private Sub backImage_Click
	'turn off the visibility of the main frame and turn the visibility of the start
	'frame to true
	mainFrame.Visible = False
	startFrame.Visible = True
	'set the userinp and result to 0
	userInp.Text = "0"
	result.Text = "0"
End Sub

Sub checkhigh(usr As String) As Boolean
	If usr > 2000000000 Or usr < -2000000000 Then
		ToastMessageShow("input/output is too high", False)
		Return True
	End If
	If first = True Then
		If userInp.Text.Replace(",","") > 2000000000 Or userInp.Text.Replace(",","") < -2000000000 Then
			ToastMessageShow("input/output is too high", False)
			Return True
		Else if result.Text.Replace(",","") > 2000000000 Or result.Text.Replace(",","") < -2000000000 Then
			ToastMessageShow("input/output is too high", False)
			Return True
		End If
	End If
	Return False
End Sub

'input function
Sub input(number As String)
	
	If first = True Then
		If userInp.Text = 0 And number <> "." Then 'checks if the value of text is 0
			userInp.Text = number 'change the 0 to the inputted number
			Return 'exit the process
		End If
		'if statement below checks if dot already exist
		'and the user is trying to input dot, end the function if its there
		If number = "." And userInp.Text.Contains(".") Then
			Return
		End If
		'takes the number that you want to input then put it in the user input
		Dim usr As StringBuilder
		usr.Initialize
		usr.Append(userInp.Text.Replace(",","")) ' gets the user inp text
		usr.Append(number) 'add the number that was clicked to the
		
		If checkhigh(usr) Then'checks where it is too high
			Return
		End If
		
		If number = "." Then
			userInp.Text = usr
			Return
		End If
		
		userInp.Text = NumberFormat(usr, 1, 10) 'update the userinp
	Else if second = True Then 'same as the statment above but for result input
		If result.Text = 0 And number <> "." Then 'checks if the value of text is 0
			result.Text = number 'change the 0 to the inputted number
			Return 'exit the process
		End If
		'if statement below checks if dot already exist
		'and the user is trying to input dot, end the function if its there
		
		If number = "." And result.Text.Contains(".") Then
			Return
		End If
		
		'takes the number that you want to input then put it in the user input
		Dim usr As StringBuilder
		usr.Initialize
		usr.Append(result.Text.Replace(",","")) ' gets the user inp text
		usr.Append(number) 'add the number that was clicked to the
		If checkhigh(usr) Then'checks whether it is too high
			Return
		End If
		If number = "." Then
			result.Text = usr
			Return
		End If
		result.Text = NumberFormat(usr, 1, 10) 'update the userinp
		
	End If
End Sub

'dot button
Private Sub Buttondot_Click
	Dim number As String = "." 'adds a dot
	input(number)
End Sub

'clear button
Private Sub Buttonclear_Click
	'sets the text to 0
	userInp.Text = "0"
	result.Text = "0"
	convert
End Sub

'backspace button
Private Sub backspace_Click
	If first = True Then
		If userInp.Text = "." Then
			userInp.Text = "0"
			Return
		End If
		If userInp.Text = 0 Then
			Return
		End If
		Dim usr As String = userInp.Text.Replace(",","")
		If usr.Length > 1 Then 'checks if there is text
			usr = usr.SubString2(0, usr.Length -1) 'removes the last one
			'the process above is get the SUBSTRING starting at 0 until the index -1
		Else  'backspace for single characters
			usr = "0" 'if deleted it will turn into 0
		End If

		userInp.Text = NumberFormat(usr,1,10)
		'change the userinp text
		convert
	Else 'same as the if statment above but for the result input
		If result.Text = "." Then
			result.Text = "0"
			Return
		End If
		If result.Text = 0 Then
			Return
		End If
		Dim usr As String = result.Text.Replace(",","")
		If usr.Length > 1 Then 'checks if there is text
			usr = usr.SubString2(0, usr.Length -1) 'removes the last one
			'the process above is get the SUBSTRING starting at 0 until the index -1
		Else  'backspace for single characters
			usr = "0" 'if deleted it will turn into 0
		End If

		result.Text = NumberFormat(usr,1,10)
		'change the userinp text
		convert
	End If
End Sub

'code belows works like this:: below
'buttons function below just adds a number to the input, to the far most right
'every click calculates the result
'
Sub convert
	'checks which is selected then convert it
	If coinClick = True Then
		convertMoney
	else if weightClick = True Then
		convertMass
	else if lengthClick = True Then
		convertDist
	End If
End Sub

Private Sub Button0_Click
	Dim const number As String = "0"
	input(number)
	convert
End Sub
 
Private Sub Button1_Click
	Dim const number As String = "1"
	input(number)
	convert
End Sub
 
Private Sub Button2_Click
	Dim const number As String = "2"
	input(number)
	convert
End Sub
 
Private Sub Button3_Click
	Dim const number As String = "3"
	input(number)
	convert
End Sub
 
Private Sub Button4_Click
	Dim const number As String = "4"
	input(number)
	convert
End Sub
 
Private Sub Button5_Click
	Dim const number As String = "5"
	input(number)
	convert
End Sub
 
Private Sub Button6_Click
	Dim const number As String = "6"
	input(number)
	convert
End Sub
 
Private Sub Button7_Click
	Dim const number As String = "7"
	input(number)
	convert
End Sub
 
Private Sub Button8_Click
	Dim const number As String = "8"
	input(number)
	convert
End Sub
 
Private Sub Button9_Click
	Dim const number As String = "9"
	input(number)
	convert
End Sub
'until here
 

Private Sub userInp_Click
	first = True
	second = False
	changeText
End Sub

Private Sub result_Click
	first = False
	second = True
	changeText
End Sub
